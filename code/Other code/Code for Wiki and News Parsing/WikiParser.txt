import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;

import org.xml.sax.Attributes;
import org.xml.sax.SAXException;
import org.xml.sax.helpers.DefaultHandler;




public class ParserWiki extends DefaultHandler{
	static int count = 643;

	public static void main(String[] args){

		// TODO Auto-generated method stub
		File ipDirectory = new File("D:\\IR Project\\New folder\\01");
		String[] catDirectories = ipDirectory.list();

		String[] files;
		File dir;
		try {
			File tempFile1 = new File("D:\\IR Project\\New folder\\01\\test4.xml");
			BufferedWriter writer1 = new BufferedWriter(new FileWriter(tempFile1));
			writer1.write("<add>");
			writer1.newLine();
			for (String cat : catDirectories) {
				dir = new File(ipDirectory + File.separator + cat);
				files = dir.list();
				if (files == null)
					continue;
				for (String f : files) {
					System.out.println(dir + File.separator +f);
					parse(dir + File.separator +f, writer1);
				}
			}
			writer1.write("</add>");
			writer1.close();
			//		boolean successful = tempFile.renameTo(inputFile);
			//		System.out.println(successful);
			//				parse("D:\\IR Project\\01\\01\\01\\1815721.xml");

		}
		catch (Exception e) {
			e.printStackTrace();
		}
	}



	private static void parse(String filename, final BufferedWriter writer1){
		// TODO Auto-generated method stub

		try {
			FileInputStream fis = new FileInputStream(filename);
			byte[] contents = new byte[fis.available()];
			fis.read(contents, 0, contents.length);
			String asString = new String(contents, "US-ASCII");
			byte[] newBytes = asString.getBytes("UTF-8");
			FileOutputStream fos = new FileOutputStream(filename);
			fos.write(newBytes);
			fos.close();
		} catch(Exception e) {
			e.printStackTrace();
		}

		try {

			SAXParserFactory factory = SAXParserFactory.newInstance();
			SAXParser saxParser = factory.newSAXParser();

			DefaultHandler handler = new DefaultHandler() {

				boolean title = false;
				boolean block = false;
				boolean text = false;
				boolean page = false;
				boolean flag = true;
				String body = "";
				String body1 = "";
				String sub = "";
				public void startElement(String uri, String localName,String qName, 
						Attributes attributes) throws SAXException {

					//System.out.println("Start Element :" + qName);
					if (qName.equalsIgnoreCase("page")) {
						System.out.println(count);
						page = true;
						try {
							writer1.write("<doc>");
							writer1.newLine();
							writer1.write("<field name=\"id\">W_"+ ++count +"</field>");
							writer1.newLine();
						} catch (IOException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}	
					}			 
					if (qName.equalsIgnoreCase("title")) {
						title = true;
					}

					if (qName.equalsIgnoreCase("text")) {
						if ((attributes.getValue("xml:space")).equalsIgnoreCase("preserve")){
							block = true;
						}
					}
				}

				public void endElement(String uri, String localName,
						String qName) throws SAXException {
					if (qName.equalsIgnoreCase("text")) {
						block = false;
						if(body!=""){
							flag = false;
						}

					}
					if (qName.equalsIgnoreCase("page")) {
						//System.out.println(true);
						try {
							writer1.write("<field name=\"text\">"+ body +"</field>");
							writer1.newLine();
							writer1.write("</doc>");
							writer1.newLine();
							//System.out.println(body);
							body = "";
							page = false;
							flag = true;
						} catch (IOException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}	

					}
					//System.out.println("End Element :" + qName);

				}

				public void characters(char ch[], int start, int length) throws SAXException {

					//System.out.println("text : " + new String(ch, start, length));
					if (title) {
						try {
							writer1.write("<field name=\"title\">"+new String(ch, start, length)+"</field>");
							writer1.newLine();
						} catch (IOException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						title = false;
					}

					if (block == true && flag == true) {
						body1 = new String(ch, start, length);
						if(body1 == "" || body1 == null){
							block = false;
						}
						else{
							
							//body1 = body1.replaceAll(" ", "");
							sub = (String) body1.subSequence(0, 1);
							if(!sub.equalsIgnoreCase("#")){

								body = body + new String(ch, start, length);
								//							body = body.replaceAll("'''", "\"");
								//							body = body.replaceAll("``", "\"");
								//							body = body.replaceAll("''", "\"");
								//							body = body.replaceAll("&c.", "so forth");
								//							body = body.replaceAll("&lt;", "<");
								//							body = body.replaceAll("&gt;", ">");
								//body = body.replaceAll("[[", "");
								//body = body.replaceAll("]]", "");
							}
						}
					}
				}

			};

			saxParser.parse(filename, handler);


		} catch (Exception e) {
			System.out.println(e.getMessage());
		} 


	}


}

